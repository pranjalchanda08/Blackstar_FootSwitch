let fs = require("fs");
let fetch = require('node-fetch');
let constants = require('../constants');

function getCodeSnippet(snippet) {
    let queryParams = `${snippet.sourceLocation}?branch=${snippet.branch}&rev=${snippet.commit}&path=${snippet.file}`;
    let url = `${constants.CODESERVER_BACKEND_URL}/content?dfScmUrl=` + encodeURIComponent(queryParams);

    return fetch(url).then(response => {
        return response.text();
    }).then(text => {
        return {"code": text.split('\n').slice(snippet.startLine - 1, snippet.endLine).join('\n'), "snippet": snippet};
    }).catch(error => {
        console.log("err", error);
        return null;
    });
}

function getCodeSnippetHtml(code) {
    return "<td style='white-space: pre-wrap'><pre class='prettyprint'>" + code + "</pre></td></tr>";
}

function getCodeSnippetLinkHtml(promisesResult) {
    let htmlToInject = `<td style="font-family: monospace;">`;
    htmlToInject += `<b>File:</b> ${promisesResult.snippet.file} <br><br>`;
    htmlToInject += `<b>Lines:</b> ${promisesResult.snippet.startLine} - ${promisesResult.snippet.endLine}<br><br>`;
    htmlToInject += `<a href=${promisesResult.snippet.permalink} target="_blank"><b>Snippet Link</b></a></td>`;
    return htmlToInject;
}


function getPermalinkPropertiesMap(msg) {
    let permalinkPropertiesMap = {};
    for (let property in msg.payload) {
        for (let snippet of msg.payload[property].snippets) {
            let key = snippet.permalink;
            if (!permalinkPropertiesMap.hasOwnProperty(key))
                permalinkPropertiesMap[key] = [];
            permalinkPropertiesMap[key].push(property);
        }
    }
    return permalinkPropertiesMap;
}


function getRepoDetailsHtml(promisesResult) {
    let htmlToInject = `<td style="font-family: monospace;">`;
    htmlToInject += `<b>Repo Url:</b> <a href="${promisesResult.snippet.sourceLocation}" target="_blank">${promisesResult.snippet.sourceLocation}</a><br><br>`;
    htmlToInject += `<b>Branch:</b> ${promisesResult.snippet.branch}<br><br>`;
    htmlToInject += `<b>Commit:</b> ${promisesResult.snippet.commit}</td>`;
    return htmlToInject;
}

module.exports = function (RED) {
    function IssueDashboard(config) {
        RED.nodes.createNode(this, config);
        let node = this;

        node.on('input', function (msg) {
            let permalinkPropertiesMap = getPermalinkPropertiesMap(msg);

            let sourcePromiseList = [];
            for (let property in msg.payload)
                for (let snippet of msg.payload[property].snippets)
                    sourcePromiseList.push(getCodeSnippet(snippet));

            Promise.all(sourcePromiseList)
                .then(promisesResultsList => {
                    let htmlToInject = "";
                    for (let promisesResult of promisesResultsList) {
                        if (!promisesResult)
                            continue;
                        htmlToInject += "<tr>";
                        htmlToInject += `<td style="text-align: center">${permalinkPropertiesMap[promisesResult.snippet.permalink]}</td>`;
                        htmlToInject += getRepoDetailsHtml(promisesResult);
                        htmlToInject += getCodeSnippetLinkHtml(promisesResult);
                        htmlToInject += getCodeSnippetHtml(promisesResult.code);
                        htmlToInject += "</tr>";
                    }

                    fs.readFile(__dirname + "/datatable.html", "utf8", function (err, data) {
                        if (err) throw err;
                        data = data.replace('{{htmlToInject}}', htmlToInject);
                        msg.payload = data;
                        node.send(msg);
                    });
                });

        });
    }

    RED.nodes.registerType("IssueDashboard", IssueDashboard);
};